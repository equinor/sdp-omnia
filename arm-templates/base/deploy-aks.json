{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vnetName":{
            "type":"string"
        },
        "enableAutoscaler":{
            "type": "bool",
            "defaultValue": true
        },
        "subnetRange":{
            "type":"string",
            "defaultValue": "10.0.0.0/8"
        },
        "subnetRangePsql":{
            "type":"string",
            "defaultValue": "10.0.0.0/8"
        },
        "vnetRange":{
            "type": "array",
            "defaultValue": ["10.240.0.0/16"]
        },
        "serviceCidr":{
            "type": "string"
        },
        "dnsServiceIp":{
            "type": "string"
        },
        "minNodes":{
            "type": "int",
            "defaultValue": 2
        },
        "maxNodes":{
            "type": "int",
            "defaultValue": 3
        },
        "kubernetesVersion": {
            "type": "string",
            "defaultValue": "1.21.9",
            "metadata": {
                "description": "The version of Kubernetes. For testing in dev, set version in parameter file instead"
            }
        }
    },
    "variables": {
        "clusterName": "[concat(resourceGroup().name, '-k8s')]"
    },
    "resources": [
        {
            "apiVersion": "2019-04-01",
            "name": "[parameters('vnetName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[parameters('vnetRange')]"                    
                },
                "subnets": [
                    {
                        "name": "aks-subnet",
                        "properties": {
                            "addressPrefix": "[parameters('subnetRange')]",
                            "addressPrefixes": [],
                            "serviceEndpoints": [ // Open up endpoint to Gitlab PSQL, Gitlab SA, Velero SA  
                                {
                                    "service": "Microsoft.Sql"
                                },
                                {
                                    "service": "Microsoft.Storage"
                                }
                            ]
                        }
                    },
                    {
                        "name": "aks-subnet-psql",
                        "properties": {
                            "addressPrefix": "[parameters('subnetRangePsql')]",
                            "addressPrefixes": [],
                            "delegations": [
                                {
                                    "name": "dlg-Microsoft.DBforPostgreSQL-flexibleServers",
                                    "properties": {
                                        "serviceName": "Microsoft.DBforPostgreSQL/flexibleServers"
                                    }
                                }
                            ],
                            "serviceEndpoints": [ // Open up endpoint to Gitlab PSQL, Gitlab SA, Velero SA  
                                {
                                    "service": "Microsoft.Sql"
                                },
                                {
                                    "service": "Microsoft.Storage"
                                }
                            ]
                        }
                    }                    
                ]
            }
        },
        {
            "apiVersion": "2020-09-01",
            "dependsOn": [
                "[parameters('vnetName')]"
                ],
            "type": "Microsoft.ContainerService/managedClusters",
            "location": "[resourceGroup().location]",
            "name": "[variables('clusterName')]",
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": true,
                "nodeResourceGroup": "[if(contains(resourceGroup().name, 'dev'), concat(variables('clusterName'), '-dataplane'), '')]", //custom nodepool rg for dev only
                "dnsPrefix": "[concat(variables('clusterName'),'-dns')]",
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "mode": "System",
                        "count": 2,
                        "osDiskType": "[if(contains(resourceGroup().name, 'dev'), 'Ephemeral', 'Managed')]", //Epheremal only for dev
                        "vmSize": "Standard_DS12_v2",
                        "osType": "Linux",
                        "enableAutoScaling": "[parameters('enableAutoscaler')]",
                        "minCount": "[parameters('minNodes')]",
                        "maxCount": "[parameters('maxNodes')]",
                        "storageProfile": "ManagedDisks",
                        "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'),'aks-subnet')]",
                        "type": "VirtualMachineScaleSets",
                        "maxPods": 250
                    }
                ],
                "networkProfile": {
                    "networkPlugin": "azure",
                    "loadBalancerSku": "[if(contains(resourceGroup().name, 'dev'), 'Standard', 'Basic')]", //Standard only for dev until cluster
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "dnsServiceIP": "[parameters('dnsServiceIp')]",
                    "dockerBridgeCidr": "172.17.0.1/16"
                },
                "addonProfiles": {
                    "httpApplicationRouting": {
                        "enabled": false
                    }
                },
                "aadProfile": {
                    "managed": true,
                    "tenantId": "3aa4a235-b6e2-48d5-9195-7fcf05b459b0",
                    "adminGroupObjectIDs": [
                        "a4f395a4-3aaa-4a34-8b72-977b3e382fab" // Only AZAPPL SDP Tools - Contributor can use kubecontext
                    ]
                },
                "identity": {
                    "type": "UserAssigned",
                    "userAssignedIdentites":  "[concat('/subscriptions/b18da12e-efa1-4642-8fec-b6580b00212c/resourceGroups/k8s-infrastructure/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', resourceGroup().name, '-aks-mi')]"
                }
            },
            "tags": {}
        }
    ],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', variables('clusterName'))).fqdn]"
        },
        "vnetSubnetId2": {
            "type": "string",
            "value": "[reference(resourceId(resourceGroup().name,'Microsoft.ContainerService/managedClusters/', variables('clusterName')), '2019-08-01').agentPoolProfiles[0].vnetSubnetID]"
        }
    }
}
